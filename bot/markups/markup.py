from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram import types

from filters import filtersbot
from sql_function import databasework
import math

def start_markup(): # —Å—Ç–∞—Ä—Ç –∫–Ω–æ–ø–∫–∏

    markup = (
        InlineKeyboardBuilder()
        .button(text='–¢–∏—á-–ü–∏—Ü—Ü–∞', callback_data='pizza') # 
        .button(text='–ï–±–∏–¥–æ–µ–±–∏', callback_data='ebi')
        .adjust(1, repeat=True)
        .as_markup()
    )
    
    return markup


async def otdels_markup(current_page: int = 0):
    locations = await databasework.get_all_otdels()
    markup = InlineKeyboardBuilder()
    
    page_width = 10 # –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    page_offset = current_page * page_width

    last_page = max(0, math.ceil(len(locations) / page_width) - 1)
    prev_page = max(0, current_page - 1)
    next_page = min(last_page, current_page + 1)
    
    for i in locations[page_offset : page_offset + page_width]:
        name = i[1]
        markup.add(
            types.InlineKeyboardButton(
                text=name, 
                callback_data=filtersbot.OtdelsMarkup(action='open', id_otdel=i[0]).pack()
            )
        )
    
    markup.adjust(1)
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination_buttons = []
    
    if prev_page != current_page: # –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        pagination_buttons.append(
            types.InlineKeyboardButton(
                text="‚óÄÔ∏è",
                callback_data=filtersbot.PageCallback(page=prev_page, action='otdel').pack()
            )
        )

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    pagination_buttons.append(
        types.InlineKeyboardButton(
            text=f"{current_page + 1}/{last_page + 1}",
            callback_data='no_action'  # –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ
        )
    )
    
    if last_page != current_page: # –∫–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥"
        pagination_buttons.append(
            types.InlineKeyboardButton(
                text="‚ñ∂Ô∏è",
                callback_data=filtersbot.PageCallback(page=next_page, action='otdel').pack()
            )
        )

    markup.row(*pagination_buttons)

    # –ö–Ω–æ–ø–∫–∞ "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    markup.row(
        types.InlineKeyboardButton(
            text='üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 
            callback_data='main_menu'
        )
    )
    
    return markup.as_markup()



async def questions_markup(otdel_id: int, current_page: int = 0):
    locations = await databasework.get_all_questions_where_otdel_id(otdel_id)
    markup = InlineKeyboardBuilder()
    
    page_width = 20  # –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    page_offset = current_page * page_width

    last_page = max(0, math.ceil(len(locations) / page_width) - 1)
    prev_page = max(0, current_page - 1)
    next_page = min(last_page, current_page + 1)

    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–æ–∫ —Å —É—á–µ—Ç–æ–º –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    texts = []

    # –ù–æ–º–µ—Ä –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    start_index = page_offset + 1

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
    for index, i in enumerate(locations[page_offset: page_offset + page_width], start=start_index):
        name = i[1]
        text = f"{index}. {name}"  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –Ω–æ–º–µ—Ä–æ–º –≤–æ–ø—Ä–æ—Å–∞
        texts.append(text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        markup.add(
            types.InlineKeyboardButton(
                text=text, 
                callback_data=filtersbot.QuestionsMarkup(action='open_ques', id_question=i[0], id_otdel=otdel_id).pack()
            )
        )
    
    # –í—ã–±–∏—Ä–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ (2 –∏–ª–∏ 3)
    markup.adjust(2, 3)
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination_buttons = []
    
    if prev_page != current_page:  # –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        pagination_buttons.append(
            types.InlineKeyboardButton(
                text="‚óÄÔ∏è",
                callback_data=filtersbot.PageCallbackQuestions(otdel_id=otdel_id, page=prev_page, action='question').pack()
            )
        )

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    pagination_buttons.append(
        types.InlineKeyboardButton(
            text=f"{current_page + 1}/{last_page + 1}",
            callback_data='no_action'  # –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ
        )
    )
    
    if last_page != current_page:  # –∫–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥"
        pagination_buttons.append(
            types.InlineKeyboardButton(
                text="‚ñ∂Ô∏è",
                callback_data=filtersbot.PageCallbackQuestions(otdel_id=otdel_id, page=next_page, action='question').pack()
            )
        )
        
    if last_page == current_page:
        markup.row(
            types.InlineKeyboardButton(
                text="–°–ø—Ä–æ—Å–∏ HR",
                url="https://docs.google.com/forms/d/1jyqXjKX_MrcboWJiUOJsUIzuq_gwb_iEzwQKWqUoUPQ/edit"
            )
        )

    markup.row(*pagination_buttons)
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    markup.row(
        types.InlineKeyboardButton(
            text='üîô –ù–∞–∑–∞–¥', 
            callback_data='back_to_otdels'
        )
    )
    
    return (texts, markup.as_markup())






def back_to_questions(id_otdel: int): # —Å—Ç–∞—Ä—Ç –∫–Ω–æ–ø–∫–∏

    markup = (
        InlineKeyboardBuilder()
        .button(text='üîô –ù–∞–∑–∞–¥', callback_data=filtersbot.BackToQuestions(id_otdel=id_otdel, action='back').pack())
        .adjust(1, repeat=True)
        .as_markup()
    )
    
    return markup