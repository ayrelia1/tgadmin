from logging.handlers import RotatingFileHandler
import os
from config import dp, logging, bot, Bot, current_directory, root_path
from aiogram.types import BotCommand, BotCommandScopeDefault

from middlewares import setup
from handlers import routers
import asyncio
from db.models import create_tables
from db.db import engine
from apscheduler.schedulers.asyncio import AsyncIOScheduler

import sys


schedulers = AsyncIOScheduler()




@dp.startup()
async def start_commands(bot: Bot):
    commands = [
        BotCommand(
            command='start',
            description='üîÑ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
        )
    ]
    await bot.set_my_commands(commands, BotCommandScopeDefault())

    
    #schedulers.add_job() 123
    schedulers.start()
    
    task1 = asyncio.create_task(create_tables()) # —Å–æ–∑–¥–∞–µ–º –±–∞–∑—É —é–∑–µ—Ä–æ–≤ –µ—Å–ª–∏ –Ω–µ—Ç

    
@dp.shutdown()
async def dispose(bot: Bot):
    schedulers.shutdown()
    engine.dispose()

            
                

async def main() -> None:     # —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    log_dir = '/app/logs'
    os.makedirs(log_dir, exist_ok=True)  # –°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    log_file = os.path.join(log_dir, 'app_bot.log')
    
    # –°–æ–∑–¥–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä
    formatter = logging.Formatter('%(asctime)s - [%(levelname)s] - %(name)s - '
                                  '(%(filename)s).%(funcName)s(%(lineno)d) - %(message)s')
    
    logging.getLogger("requests").setLevel(logging.WARNING)
    logging.getLogger("apscheduler").setLevel(logging.WARNING)
    # –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–≥–µ—Ä
    logger = logging.getLogger()
    logger.setLevel(logging.INFO)
    
    # –°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏ –ª–æ–≥–æ–≤
    file_handler = RotatingFileHandler(log_file, maxBytes=10*1024*1024, backupCount=5)
    file_handler.setLevel(logging.INFO)
    file_handler.setFormatter(formatter)
    
        # –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    console_handler = logging.StreamHandler()
    console_handler.setLevel(logging.INFO)
    console_handler.setFormatter(formatter)
    
    # –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫ –ª–æ–≥–≥–µ—Ä—É
    logger.addHandler(file_handler)
    logger.addHandler(console_handler)
    


    
    for router in routers:
        dp.include_router(router) # –∏–º–ø–æ—Ä—Ç —Ä–æ—É—Ç–µ—Ä–æ–≤
        
        
    setup(dp)  # –º–∏–¥–ª–≤–∞—Ä–∏    
    try:
        await dp.start_polling(bot) # –∑–∞–ø—É—Å–∫ –ø–æ–ª–ª–∏–Ω–≥–∞
    except Exception as ex:
        print(ex)

        
    
if __name__ == "__main__":
    if sys.version_info >= (3, 8) and sys.platform.lower().startswith("win"):
            asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy()) # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–∏—Ç–∏–∫—É –¥–ª—è –ª—É–ø–∞ –µ—Å–ª–∏ wind
            
    
    asyncio.run(main()) 